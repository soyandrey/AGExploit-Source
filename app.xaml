<Application x:Class="agexploit.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:agexploit">
  <Application.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml"/>
      </ResourceDictionary.MergedDictionaries>
      <SolidColorBrush x:Key="Button.Static.Background" Color="#00ffffff"/>
      <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#90e62345"/>
      <SolidColorBrush x:Key="Button.Pressed.Background" Color="#ffe62345"/>
      <SolidColorBrush x:Key="Button.Disabled.Background" Color="#ff181818"/>
      <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="Transparent"/>
      <SolidColorBrush x:Key="ScrollBar.Pressed.Glyph" Color="#ffffff"/>
      <SolidColorBrush x:Key="ScrollBar.MouseOver.Glyph" Color="#a0a0a0"/>
      <SolidColorBrush x:Key="ScrollBar.Disabled.Glyph" Color="#404040"/>
      <SolidColorBrush x:Key="ScrollBar.Static.Glyph" Color="#808080"/>
      <SolidColorBrush x:Key="ScrollBar.MouseOver.Background" Color="#303030"/>
      <SolidColorBrush x:Key="ScrollBar.Pressed.Background" Color="#404040"/>
      <SolidColorBrush x:Key="ScrollBar.Disabled.Background" Color="#181818"/>
      <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="#60ffffff"/>
      <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="#70ffffff"/>
      <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="#80ffffff"/>
      <SolidColorBrush x:Key="TabItem.Static.Background" Color="#00ffffff"/>
      <SolidColorBrush x:Key="TabItem.MouseOver.Background" Color="#20ffffff"/>
      <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#40ffffff"/>
      <SolidColorBrush x:Key="ListBox.Static.Background" Color="#181818"/>
      <Style x:Key="TitleButton" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border Name="border" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                      CornerRadius="10">
                <ContentPresenter Name="contentPresenter" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <Setter TargetName="border" Value="{StaticResource Button.MouseOver.Background}"
                          Property="Border.Background"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                  <Setter TargetName="border" Value="{StaticResource Button.Pressed.Background}" Property="Border.Background"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="RoundButton" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="6 1"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border Name="border" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                      CornerRadius="6">
                <ContentPresenter Name="contentPresenter" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <Setter TargetName="border" Value="{StaticResource Button.MouseOver.Background}"
                          Property="Border.Background"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                  <Setter TargetName="border" Value="{StaticResource Button.Pressed.Background}" Property="Border.Background"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                  <Setter TargetName="border" Value="{StaticResource Button.Disabled.Background}"
                          Property="Border.Background"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="RoundCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type CheckBox}">
              <BulletDecorator>
                <BulletDecorator.Bullet>
                  <StackPanel Orientation="Horizontal">
                    <Border Name="Border" Width="21" Height="21" Background="#181818" CornerRadius="6">
                      <Path Name="CheckMark" Width="7" Height="7" SnapsToDevicePixels="false" Stroke="#FFFFFFFF"
                            StrokeThickness="2" Data="M 0,0 L 7,7 M 0,7 L 7,0 "/>
                    </Border>
                    <TextBlock Text="{TemplateBinding ContentControl.Content}" Foreground="#FFFFFFFF" Margin="6 2 0 0"/>
                  </StackPanel>
                </BulletDecorator.Bullet>
              </BulletDecorator>
              <ControlTemplate.Triggers>
                <Trigger Property="ToggleButton.IsChecked" Value="false">
                  <Setter TargetName="CheckMark" Property="UIElement.Visibility" Value="Collapsed"/>
                </Trigger>
                <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
                  <Setter TargetName="CheckMark" Property="Path.Data" Value="M 0,7 L 7,0 "/>
                </Trigger>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <Setter TargetName="Border" Value="{StaticResource Button.MouseOver.Background}"
                          Property="Border.Background"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                  <Setter TargetName="Border" Value="{StaticResource Button.Pressed.Background}" Property="Border.Background"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                  <Setter TargetName="Border" Property="Border.Background" Value="#FFFFFFFF"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ListButton" TargetType="{x:Type Button}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="8 1"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
              <Border Name="border" Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true"
                      CornerRadius="0">
                <ContentPresenter Name="contentPresenter" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <Setter TargetName="border" Value="{StaticResource Button.MouseOver.Background}"
                          Property="Border.Background"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                  <Setter TargetName="border" Value="{StaticResource Button.Pressed.Background}" Property="Border.Background"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                  <Setter TargetName="border" Value="{StaticResource Button.Disabled.Background}"
                          Property="Border.Background"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Padding" Value="1"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Border Name="border" SnapsToDevicePixels="true" Background="{StaticResource ScrollBar.Static.Background}">
                <ContentPresenter Name="contentPresenter" Focusable="false"
                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                  Margin="{TemplateBinding Control.Padding}"
                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
              </Border>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <Setter TargetName="border" Value="{StaticResource ScrollBar.MouseOver.Background}"
                          Property="Border.Background"/>
                </Trigger>
                <Trigger Property="ButtonBase.IsPressed" Value="true">
                  <Setter TargetName="border" Value="{StaticResource ScrollBar.Pressed.Background}"
                          Property="Border.Background"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                  <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.56"/>
                  <Setter TargetName="border" Value="{StaticResource ScrollBar.Disabled.Background}"
                          Property="Border.Background"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.Background" Value="#00FFFFFF"/>
        <Setter Property="UIElement.Focusable" Value="false"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
              <Rectangle Fill="{TemplateBinding Control.Background}" Height="{TemplateBinding FrameworkElement.Height}"
                         Width="{TemplateBinding FrameworkElement.Width}"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
              <Border Name="rectangle" CornerRadius="3" Height="{TemplateBinding FrameworkElement.Height}"
                      SnapsToDevicePixels="true" Width="{TemplateBinding FrameworkElement.Width}"
                      Background="{StaticResource ScrollBar.Static.Thumb}"/>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <Setter TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}"
                          Property="Border.Background"/>
                </Trigger>
                <Trigger Property="Thumb.IsDragging" Value="true">
                  <Setter TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}"
                          Property="Border.Background"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="Control.IsTabStop" Value="false"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
              <Border Name="rectangle" CornerRadius="3" Height="{TemplateBinding FrameworkElement.Height}"
                      SnapsToDevicePixels="true" Width="{TemplateBinding FrameworkElement.Width}"
                      Background="{StaticResource ScrollBar.Static.Thumb}"/>
              <ControlTemplate.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="true">
                  <Setter TargetName="rectangle" Value="{StaticResource ScrollBar.MouseOver.Thumb}"
                          Property="Border.Background"/>
                </Trigger>
                <Trigger Property="Thumb.IsDragging" Value="true">
                  <Setter TargetName="rectangle" Value="{StaticResource ScrollBar.Pressed.Thumb}"
                          Property="Border.Background"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Background" Value="{StaticResource ScrollBar.Static.Background}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource SystemColors.ControlTextBrushKey}"/>
        <Setter Property="FrameworkElement.Width" Value="8"/>
        <Setter Property="FrameworkElement.MinWidth" Value="8"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid Name="Bg" SnapsToDevicePixels="true">
                <Grid.RowDefinitions>
                  <RowDefinition Height="0.00001*"/>
                </Grid.RowDefinitions>
                <Border Background="{TemplateBinding Control.Background}" Grid.Row="0"/>
                <Track Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding UIElement.IsMouseOver}"
                       Grid.Row="0">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                  </Track.Thumb>
                </Track>
              </Grid>
              <ControlTemplate.Triggers>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true"/>
                  </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true"/>
                  </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false"/>
                  </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                    <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false"/>
                  </MultiDataTrigger.Conditions>
                </MultiDataTrigger>
                <Trigger Property="UIElement.IsEnabled" Value="false"/>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <Trigger Property="ScrollBar.Orientation" Value="Horizontal">
            <Setter Property="FrameworkElement.Width" Value="Auto"/>
            <Setter Property="FrameworkElement.MinWidth" Value="0"/>
            <Setter Property="FrameworkElement.Height" Value="8"/>
            <Setter Property="FrameworkElement.MinHeight" Value="8"/>
            <Setter Property="Control.Template">
              <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                  <Grid Name="Bg" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="0.00001*"/>
                    </Grid.ColumnDefinitions>
                    <Border Background="{TemplateBinding Control.Background}" Grid.Column="0"/>
                    <Track Name="PART_Track" Grid.Column="0" IsEnabled="{TemplateBinding UIElement.IsMouseOver}">
                      <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                      </Track.DecreaseRepeatButton>
                      <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                      </Track.IncreaseRepeatButton>
                      <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
                      </Track.Thumb>
                    </Track>
                  </Grid>
                  <ControlTemplate.Triggers>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true"/>
                      </MultiDataTrigger.Conditions>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true"/>
                      </MultiDataTrigger.Conditions>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false"/>
                      </MultiDataTrigger.Conditions>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false"/>
                      </MultiDataTrigger.Conditions>
                    </MultiDataTrigger>
                    <Trigger Property="UIElement.IsEnabled" Value="false"/>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Setter.Value>
            </Setter>
          </Trigger>
        </Style.Triggers>
      </Style>
      <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollViewer}">
              <Grid Name="Grid" Background="{TemplateBinding Control.Background}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="*"/>
                  <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Rectangle Name="Corner" Grid.Column="1" Grid.Row="1" Fill="{StaticResource ScrollBar.Static.Background}"/>
                <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                        CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}" CanHorizontallyScroll="false"
                                        CanVerticallyScroll="false" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                        Content="{TemplateBinding ContentControl.Content}" Grid.Column="0"
                                        Margin="{TemplateBinding Control.Padding}" Grid.Row="0"/>
                <ScrollBar Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow"
                           Grid.Column="1" Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}" Minimum="0" Grid.Row="0"
                           Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                           ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                           Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                <ScrollBar Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar"
                           Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}" Minimum="0"
                           Orientation="Horizontal" Grid.Row="1"
                           Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                           ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                           Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="Tabs" TargetType="{x:Type TabControl}">
        <Setter Property="Control.Padding" Value="2"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Background" Value="{StaticResource TabItem.Selected.Background}"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource SystemColors.ControlTextBrushKey}"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabControl}">
              <Grid Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true"
                    KeyboardNavigation.TabNavigation="Local">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition x:Name="ColumnDefinition0"/>
                  <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                  <RowDefinition x:Name="RowDefinition1" Height="*"/>
                </Grid.RowDefinitions>
                <ScrollViewer Name="TabScrollViewer" VerticalScrollBarVisibility="Disabled" Background="#00FFFFFF"
                              HorizontalScrollBarVisibility="Hidden" ClipToBounds="true">
                  <StackPanel Orientation="Horizontal">
                    <TabPanel Name="headerPanel" Background="#00FFFFFF" IsItemsHost="true" KeyboardNavigation.TabIndex="1"
                              ZIndex="1" Margin="0 2 0 0"/>
                    <Button Name="AddTabButton" Width="15" Height="15" Margin="4" Padding="0"
                            Style="{StaticResource RoundButton}">
                      <Grid>
                        <Path Stroke="#FFFFFFFF" StrokeThickness="1" Data="M 0,4.5 L 9,4.5 "/>
                        <Path Stroke="#FFFFFFFF" StrokeThickness="1" Data="M 4.5,0 L 4.5,9 "/>
                      </Grid>
                    </Button>
                  </StackPanel>
                </ScrollViewer>
                <Border Name="contentPanel" BorderBrush="{TemplateBinding Control.BorderBrush}"
                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                        Background="{TemplateBinding Control.Background}" Grid.Column="0"
                        KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2"
                        KeyboardNavigation.TabNavigation="Local">
                  <ContentPresenter Name="PART_SelectedContentHost" ContentSource="SelectedContent"
                                    Margin="{TemplateBinding Control.Padding}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                </Border>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="Tab" TargetType="{x:Type TabItem}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.Background" Value="{StaticResource TabItem.Static.Background}"/>
        <Setter Property="FrameworkElement.Margin" Value="0"/>
        <Setter Property="Control.Padding" Value="6,2,6,2"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TabItem}">
              <Grid Name="templateRoot" SnapsToDevicePixels="true" Background="#181818">
                <Border Name="mainBorder" BorderBrush="{TemplateBinding Control.BorderBrush}" CornerRadius="3 3 0 0"
                        BorderThickness="0" Background="{TemplateBinding Control.Background}" Margin="0"/>
                <StackPanel Orientation="Horizontal">
                  <ContentPresenter Name="contentPresenter" ContentSource="Header" Focusable="false"
                                    Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                    HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                    VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                  <Button Name="CloseButton" Margin="-3 3 3 3" Padding="0" Height="13" Width="13"
                          Style="{StaticResource RoundButton}">
                    <Grid>
                      <Path Stroke="#FFFFFFFF" StrokeThickness="1" Data="M 0,0 L 5,5 "/>
                      <Path Stroke="#FFFFFFFF" StrokeThickness="1" Data="M 0,5 L 5,0 "/>
                    </Grid>
                  </Button>
                </StackPanel>
              </Grid>
              <ControlTemplate.Triggers>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                               Value="Top"/>
                  </MultiDataTrigger.Conditions>
                  <Setter TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"
                          Property="Border.Background"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}"
                               Value="Top"/>
                  </MultiDataTrigger.Conditions>
                  <Setter Property="Panel.ZIndex" Value="1"/>
                  <Setter TargetName="mainBorder" Value="{StaticResource TabItem.Selected.Background}"
                          Property="Border.Background"/>
                </MultiDataTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style x:Key="InvisibleTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="Control.Background" Value="#00FFFFFF"/>
        <Setter Property="Control.BorderBrush" Value="#00FFFFFF"/>
        <Setter Property="FrameworkElement.ContextMenu" Value="{x:Null}"/>
        <Setter Property="TextBoxBase.CaretBrush" Value="#FFFFFFFF"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="UIElement.AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.Padding" Value="0"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type TextBox}">
              <Border Name="border" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" SnapsToDevicePixels="true">
                <ScrollViewer Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden"/>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Style.Triggers>
          <MultiTrigger>
            <MultiTrigger.Conditions>
              <Condition Property="TextBoxBase.IsInactiveSelectionHighlightEnabled" Value="true"/>
              <Condition Property="TextBoxBase.IsSelectionActive" Value="false"/>
            </MultiTrigger.Conditions>
            <Setter Property="TextBoxBase.SelectionBrush"
                    Value="{DynamicResource SystemColors.InactiveSelectionHighlightBrushKey}"/>
          </MultiTrigger>
        </Style.Triggers>
      </Style>
      <Style x:Key="ListBox" TargetType="{x:Type ListBox}">
        <Setter Property="Control.Background" Value="{StaticResource ListBox.Static.Background}"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="Control.Foreground" Value="#FFFFFFFF"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListBox}">
              <Border Name="Bd" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}"
                      Background="{TemplateBinding Control.Background}" Padding="1" SnapsToDevicePixels="true">
                <ScrollViewer Focusable="false" Padding="{TemplateBinding Control.Padding}">
                  <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                </ScrollViewer>
              </Border>
              <ControlTemplate.Triggers>
                <MultiTrigger>
                  <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                  </MultiTrigger.Conditions>
                </MultiTrigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
    </ResourceDictionary>
  </Application.Resources>
</Application>