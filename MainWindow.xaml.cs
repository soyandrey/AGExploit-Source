

using EasyExploits;
using ICSharpCode.AvalonEdit;
using ICSharpCode.AvalonEdit.Highlighting;
using ICSharpCode.AvalonEdit.Highlighting.Xshd;
using Microsoft.Win32;
using OxygenUI_API;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Media.Imaging;
using System.Xml;
using WeAreDevs_API;

namespace agexploit
{
  public partial class MainWindow : Window, IComponentConnector, IStyleConnector
  {
    private API oxyapi = new API();
    private Module ezapi = new Module();
    private ExploitAPI wrdapi = new ExploitAPI();
    private string currentapi = "ez";
    private bool issettings = false;
    private bool isscripthub = false;
    private TabItem CurrentTabs;
    private FileSystemWatcher fs;
    private string watchingFolder;
    internal Border mainborder;
    internal Border gamehub_bar;
    internal Image logo;
    internal Border buttonbar;
    internal TabControl tabControl;
    internal Border sideBar;
    internal TreeView mainTreeView;
    internal Border settingsborder;
    internal CheckBox dccheck;
    internal CheckBox ytcheck;
    internal CheckBox wrdcheck;
    internal CheckBox oxycheck;
    internal CheckBox oxycheck_Copy;
    internal CheckBox easycheck;
    private bool _contentLoaded;

    public MainWindow()
    {
      this.InitializeComponent();
      this.settingsborder.Margin = new Thickness(54.0, 63.0, 1164.5, 11.0);
      this.tabControl.Items.Add((object) this.MakeTab("Script " + this.tabControl.Items.Count.ToString()));
      XmlTextReader xmlTextReader = new XmlTextReader((Stream) System.IO.File.OpenRead("./bin/lua.xshd"));
      this.GetTextEditor().SyntaxHighlighting = HighlightingLoader.Load((XmlReader) xmlTextReader, (IHighlightingDefinitionReferenceResolver) HighlightingManager.Instance);
      this.GetTextEditor().Options.EnableHyperlinks = false;
      this.GetTextEditor().Options.EnableEmailHyperlinks = false;
      this.GetTextEditor().VerticalScrollBarVisibility = ScrollBarVisibility.Visible;
      this.GetTextEditor().HorizontalScrollBarVisibility = ScrollBarVisibility.Visible;
      this.easycheck.IsChecked = new bool?(true);
      this.watch();
    }

    private void ButtonTabs(object sender, RoutedEventArgs e)
    {
      string name = ((FrameworkElement) sender).Name;
      if (!(name == "AddT"))
      {
        if (!(name == "RemoveT"))
          return;
        try
        {
          if (this.tabControl.Items.Count > 1)
            this.tabControl.Items.Remove(this.tabControl.SelectedItem);
          else
            this.GetTextEditor().Clear();
        }
        catch
        {
        }
      }
      else
      {
        this.tabControl.Items.Add((object) this.MakeTab("Script " + this.tabControl.Items.Count.ToString()));
        XmlTextReader xmlTextReader = new XmlTextReader((Stream) System.IO.File.OpenRead("./bin/lua.xshd"));
        this.GetTextEditor().SyntaxHighlighting = HighlightingLoader.Load((XmlReader) xmlTextReader, (IHighlightingDefinitionReferenceResolver) HighlightingManager.Instance);
        this.GetTextEditor().Options.EnableHyperlinks = false;
        this.GetTextEditor().Options.EnableEmailHyperlinks = false;
      }
    }

    public TextEditor CreateEditor(string Start = "print(\"Welcome to AG Exploit\")")
    {
      TextEditor textEditor = new TextEditor();
      textEditor.Margin = new Thickness(0.0);
      textEditor.Background = (Brush) Brushes.Transparent;
      textEditor.Foreground = (Brush) Brushes.White;
      textEditor.FontSize = 14.0;
      textEditor.HorizontalScrollBarVisibility = ScrollBarVisibility.Hidden;
      textEditor.VerticalScrollBarVisibility = ScrollBarVisibility.Hidden;
      textEditor.ShowLineNumbers = true;
      textEditor.FontFamily = new FontFamily("Consolas");
      textEditor.Text = Start;
      return textEditor;
    }

    public TabItem CreateTab(string Title = "Untitled")
    {
      TabItem tabItem = new TabItem();
      tabItem.Header = (object) Title;
      tabItem.Style = this.TryFindResource((object) "EETABSSSSSS") as Style;
      tabItem.Foreground = (Brush) Brushes.White;
      tabItem.FontSize = 12.0;
      tabItem.Content = (object) this.CreateEditor();
      return tabItem;
    }

    public TabItem GetCurrentTab() => this.tabControl.SelectedIndex == -1 ? (TabItem) null : (this.CurrentTabs = this.tabControl.SelectedItem as TabItem);

    public TextEditor GetTextEditor() => (TextEditor) this.tabControl.SelectedContent;

    private void DropTab(object sender, DragEventArgs e)
    {
      if (!(e.Source is TabItem source) || !(e.Data.GetData(typeof (TabItem)) is TabItem data) || source.Equals((object) data))
        return;
      TabControl parent = source.Parent as TabControl;
      int insertIndex1 = parent.Items.IndexOf((object) data);
      int insertIndex2 = parent.Items.IndexOf((object) source);
      parent.Items.Remove((object) data);
      parent.Items.Insert(insertIndex2, (object) data);
      parent.Items.Remove((object) source);
      parent.Items.Insert(insertIndex1, (object) source);
      parent.SelectedIndex = insertIndex2;
    }

    private void MoveTab(object sender, MouseEventArgs e)
    {
      if (!(e.Source is TabItem source) || Mouse.PrimaryDevice.LeftButton != MouseButtonState.Pressed || VisualTreeHelper.HitTest((Visual) source, Mouse.GetPosition((IInputElement) source)).VisualHit is Button)
        return;
      int num = (int) DragDrop.DoDragDrop((DependencyObject) source, (object) source, DragDropEffects.Move);
    }

    public TabItem MakeTab(string Title = "Untitled")
    {
      TextBox textBox1 = new TextBox();
      textBox1.Text = Title;
      textBox1.IsEnabled = false;
      textBox1.TextWrapping = TextWrapping.NoWrap;
      textBox1.IsHitTestVisible = false;
      textBox1.Style = this.TryFindResource((object) "InvisibleTextBox") as Style;
      TextBox textBox2 = textBox1;
      TabItem tabItem1 = new TabItem();
      tabItem1.Content = (object) this.CreateEditor();
      tabItem1.Foreground = (Brush) Brushes.White;
      tabItem1.Style = this.TryFindResource((object) "EETABSSSSSS") as Style;
      tabItem1.Width = textBox2.Width;
      tabItem1.FontSize = 12.0;
      tabItem1.AllowDrop = true;
      tabItem1.Header = (object) textBox2;
      TabItem tabItem2 = tabItem1;
      tabItem2.Drop += new DragEventHandler(this.DropTab);
      tabItem2.MouseMove += new MouseEventHandler(this.MoveTab);
      tabItem2.MouseDown += (MouseButtonEventHandler) ((sender, e) =>
      {
        if (!(e.OriginalSource is Border) || e.RightButton != MouseButtonState.Pressed)
          return;
        TextBox header = this.GetCurrentTab().Header as TextBox;
        header.IsEnabled = true;
        header.Focus();
        header.SelectAll();
      });
      tabItem2.Margin = new Thickness(-75.0, 0.0, 0.0, 0.0);
      ThicknessAnimation thicknessAnimation = new ThicknessAnimation();
      TimeSpan timeSpan = TimeSpan.Parse("00:00:0.1");
      thicknessAnimation.From = new Thickness?(new Thickness(0.0, 10.0, 0.0, 0.0));
      thicknessAnimation.To = new Thickness?(new Thickness(0.0, 0.0, 0.0, 0.0));
      thicknessAnimation.Duration = (Duration) timeSpan;
      tabItem2.BeginAnimation(FrameworkElement.MarginProperty, (AnimationTimeline) thicknessAnimation);
      tabItem2.IsSelected = true;
      return tabItem2;
    }

    private void Border_MouseDown(object sender, MouseButtonEventArgs e) => this.DragMove();

    private void watch()
    {
      this.mainTreeView.Items.Clear();
      this.mainTreeView.Items.Add((object) this.CreateDirectoryNode(new DirectoryInfo("./Scripts")));
      this.watchingFolder = "./Scripts";
      this.fs = new FileSystemWatcher(this.watchingFolder, "*.*");
      this.fs.EnableRaisingEvents = true;
      this.fs.IncludeSubdirectories = true;
      this.fs.Created += new FileSystemEventHandler(this.changed);
      this.fs.Changed += new FileSystemEventHandler(this.changed);
      this.fs.Renamed += new RenamedEventHandler(this.renamed);
      this.fs.Deleted += new FileSystemEventHandler(this.changed);
    }

    private void changed(object source, FileSystemEventArgs e) => this.mainTreeView.Dispatcher.Invoke((Action) (() =>
    {
      this.mainTreeView.Items.Clear();
      this.mainTreeView.Items.Add((object) this.CreateDirectoryNode(new DirectoryInfo("./Scripts")));
    }));

    private void renamed(object source, RenamedEventArgs e) => this.mainTreeView.Dispatcher.Invoke((Action) (() =>
    {
      this.mainTreeView.Items.Clear();
      this.mainTreeView.Items.Add((object) this.CreateDirectoryNode(new DirectoryInfo("./Scripts")));
    }));

    private TreeViewItem GetTreeView(string tag, string text, string imagePath)
    {
      TreeViewItem treeViewItem = new TreeViewItem();
      treeViewItem.Foreground = (Brush) new SolidColorBrush((System.Windows.Media.Color) ColorConverter.ConvertFromString("#FFB4B4B4"));
      treeViewItem.Tag = (object) tag;
      treeViewItem.IsExpanded = false;
      StackPanel stackPanel = new StackPanel();
      stackPanel.Orientation = Orientation.Horizontal;
      Image image = new Image();
      image.Source = (ImageSource) new BitmapImage(new Uri("pack://application:,,/Assets/ScriptList/" + imagePath));
      image.Width = 16.0;
      image.Height = 16.0;
      RenderOptions.SetBitmapScalingMode((DependencyObject) image, BitmapScalingMode.HighQuality);
      Label label = new Label();
      label.Content = (object) text;
      label.Foreground = (Brush) new SolidColorBrush((System.Windows.Media.Color) ColorConverter.ConvertFromString("#FFB4B4B4"));
      stackPanel.Children.Add((UIElement) image);
      stackPanel.Children.Add((UIElement) label);
      treeViewItem.Header = (object) stackPanel;
      treeViewItem.ToolTip = (object) imagePath;
      ToolTipService.SetIsEnabled((DependencyObject) treeViewItem, false);
      return treeViewItem;
    }

    public void ListDirectory(TreeView treeView, string path)
    {
      treeView.Items.Clear();
      DirectoryInfo directoryInfo = new DirectoryInfo(path);
      treeView.Items.Add((object) this.CreateDirectoryNode(directoryInfo));
    }

    private TreeViewItem CreateDirectoryNode(DirectoryInfo directoryInfo)
    {
      TreeViewItem treeView = this.GetTreeView(directoryInfo.FullName, directoryInfo.Name, "folder.ico");
      foreach (DirectoryInfo directory in directoryInfo.GetDirectories())
        treeView.Items.Add((object) this.CreateDirectoryNode(directory));
      foreach (FileInfo file in directoryInfo.GetFiles())
      {
        if (file.Extension == ".lua")
          treeView.Items.Add((object) this.GetTreeView(file.FullName, file.Name, "lua.png"));
        else if (file.Extension == ".txt")
          treeView.Items.Add((object) this.GetTreeView(file.FullName, file.Name, "txt.ico"));
        else
          treeView.Items.Add((object) this.GetTreeView(file.FullName, file.Name, "file.ico"));
      }
      return treeView;
    }

    private void mainTreeView_SelectedItemChanged(
      object sender,
      RoutedPropertyChangedEventArgs<object> e)
    {
      try
      {
        if (this.mainTreeView.SelectedItem == null)
          return;
        TreeViewItem selectedItem = this.mainTreeView.SelectedItem as TreeViewItem;
        string str = selectedItem.Tag.ToString();
        if (str.EndsWith(".txt") || str.EndsWith(".lua") && !selectedItem.ToolTip.ToString().EndsWith("folder.png"))
        {
          StreamReader streamReader = new StreamReader(selectedItem.Tag.ToString());
          this.GetTextEditor().Text = streamReader.ReadToEnd();
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.ToString());
      }
    }

    private async void Button_Click(object sender, RoutedEventArgs e)
    {
      DoubleAnimation d = new DoubleAnimation();
      TimeSpan time = TimeSpan.Parse("00:00:0.3");
      d.From = new double?(1.0);
      d.To = new double?(0.0);
      d.Duration = (Duration) time;
      this.mainborder.BeginAnimation(UIElement.OpacityProperty, (AnimationTimeline) d);
      await Task.Delay(300);
      this.Close();
      d = (DoubleAnimation) null;
    }

    private void CheckBox_Checked(object sender, RoutedEventArgs e) => this.Topmost = true;

    private void CheckBox_Unloaded(object sender, RoutedEventArgs e) => this.Topmost = false;

    private void CheckBox_Unchecked(object sender, RoutedEventArgs e) => this.Topmost = false;

    private void CheckBox_Checked_1(object sender, RoutedEventArgs e)
    {
      Process.Start("https://discord.com/invite/gZdMS5b7JJ");
      this.dccheck.IsChecked = new bool?(false);
    }

    private void ytcheck_Checked(object sender, RoutedEventArgs e)
    {
      Process.Start("https://www.youtube.com/channel/UCbpfe1ewJg4DnTIGoPgfMGA");
      this.ytcheck.IsChecked = new bool?(false);
    }

    private async void Button_Click_1(object sender, RoutedEventArgs e)
    {
      if (this.issettings)
      {
        DoubleAnimation d = new DoubleAnimation();
        TimeSpan time = TimeSpan.Parse("00:00:0.3");
        d.From = new double?(1.0);
        d.To = new double?(0.0);
        d.Duration = (Duration) time;
        this.settingsborder.BeginAnimation(UIElement.OpacityProperty, (AnimationTimeline) d);
        await Task.Delay(300);
        this.settingsborder.Margin = new Thickness(54.0, 63.0, 1164.5, 11.0);
        this.issettings = false;
        d = (DoubleAnimation) null;
        time = new TimeSpan();
      }
      else
      {
        this.settingsborder.Margin = new Thickness(54.0, 63.0, 164.5, 11.0);
        DoubleAnimation d = new DoubleAnimation();
        TimeSpan time = TimeSpan.Parse("00:00:0.3");
        d.From = new double?(0.0);
        d.To = new double?(1.0);
        d.Duration = (Duration) time;
        this.settingsborder.BeginAnimation(UIElement.OpacityProperty, (AnimationTimeline) d);
        this.issettings = true;
        d = (DoubleAnimation) null;
        time = new TimeSpan();
      }
    }

    private void CheckBox_Checked_2(object sender, RoutedEventArgs e)
    {
      DoubleAnimation doubleAnimation = new DoubleAnimation();
      TimeSpan timeSpan = TimeSpan.Parse("00:00:0.3");
      doubleAnimation.From = new double?(1.0);
      doubleAnimation.To = new double?(0.4);
      doubleAnimation.Duration = (Duration) timeSpan;
      this.mainborder.BeginAnimation(UIElement.OpacityProperty, (AnimationTimeline) doubleAnimation);
    }

    private void CheckBox_Unchecked_1(object sender, RoutedEventArgs e)
    {
      DoubleAnimation doubleAnimation = new DoubleAnimation();
      TimeSpan timeSpan = TimeSpan.Parse("00:00:0.3");
      doubleAnimation.From = new double?(0.4);
      doubleAnimation.To = new double?(1.0);
      doubleAnimation.Duration = (Duration) timeSpan;
      this.mainborder.BeginAnimation(UIElement.OpacityProperty, (AnimationTimeline) doubleAnimation);
    }

    private void CheckBox_Checked_3(object sender, RoutedEventArgs e)
    {
      if (System.IO.File.Exists(Environment.CurrentDirectory + "/bin/fpsunlocker.exe"))
      {
        Process.Start(Environment.CurrentDirectory + "/bin/fpsunlocker.exe");
      }
      else
      {
        int num = (int) MessageBox.Show("FPS Unlocker does not exist", "Delta - Error");
      }
    }

    private void CheckBox_Unchecked_2(object sender, RoutedEventArgs e)
    {
      if (Process.GetProcessesByName("fpsunlocker").Length < 1)
        return;
      foreach (Process process in Process.GetProcessesByName("fpsunlocker"))
        process.Kill();
    }

    private void Button_Click_2(object sender, RoutedEventArgs e)
    {
      SaveFileDialog saveFileDialog1 = new SaveFileDialog();
      saveFileDialog1.Filter = "Lua Script (*.lua) |*.lua|Text File (*.txt) |*.txt";
      saveFileDialog1.Title = "AG | Save File";
      SaveFileDialog saveFileDialog2 = saveFileDialog1;
      if (!saveFileDialog2.ShowDialog().GetValueOrDefault())
        return;
      System.IO.File.WriteAllText(saveFileDialog2.FileName, this.GetTextEditor().Text);
    }

    private void Button_Click_3(object sender, RoutedEventArgs e)
    {
      OpenFileDialog openFileDialog1 = new OpenFileDialog();
      openFileDialog1.Title = "AG | Open File";
      openFileDialog1.Multiselect = false;
      openFileDialog1.Filter = "Txt Files (*.txt)|*.txt|Lua Files (*.lua)|*.lua";
      OpenFileDialog openFileDialog2 = openFileDialog1;
      if (!openFileDialog2.ShowDialog().GetValueOrDefault())
        return;
      this.GetTextEditor().Text = System.IO.File.ReadAllText(openFileDialog2.FileName);
    }

    private void wrdcheck_Checked(object sender, RoutedEventArgs e)
    {
      this.currentapi = "wrd";
      this.oxycheck.IsChecked = new bool?(false);
      this.easycheck.IsChecked = new bool?(false);
    }

    private void oxycheck_Checked(object sender, RoutedEventArgs e)
    {
      this.currentapi = "oxy";
      this.wrdcheck.IsChecked = new bool?(false);
      this.easycheck.IsChecked = new bool?(false);
    }

    private void Button_Click_4(object sender, RoutedEventArgs e)
    {
      string currentapi = this.currentapi;
      if (!(currentapi == "oxy"))
      {
        if (!(currentapi == "wrd"))
        {
          if (!(currentapi == "ez"))
            return;
          try
          {
            this.ezapi.LaunchExploit();
            return;
          }
          catch
          {
          }
        }
        while (true)
        {
          try
          {
            this.wrdapi.LaunchExploit();
            break;
          }
          catch
          {
          }
        }
      }
      else
      {
        while (true)
        {
          try
          {
            this.oxyapi.DownloadDll();
            this.oxyapi.DownloadInjector();
            break;
          }
          catch
          {
          }
        }
        try
        {
          this.oxyapi.Inject();
        }
        catch
        {
          int num = (int) MessageBox.Show("failed to inject? did u open roblox?", "lxnny = hot");
        }
      }
    }

    public void ExecuteFromWeb(string site)
    {
      WebClient webClient = new WebClient();
      string str = webClient.DownloadString(site);
      string currentapi = this.currentapi;
      if (!(currentapi == "oxy"))
      {
        if (!(currentapi == "wrd"))
        {
          if (currentapi == "ez")
            this.ezapi.ExecuteScript(str);
        }
        else
          this.wrdapi.SendLuaScript(str);
      }
      else
        this.oxyapi.Execute(str);
      webClient.Dispose();
    }

    private void Button_Click_5(object sender, RoutedEventArgs e)
    {
      string currentapi = this.currentapi;
      if (!(currentapi == "oxy"))
      {
        if (!(currentapi == "wrd"))
        {
          if (!(currentapi == "ez"))
            return;
          this.ezapi.ExecuteScript(this.GetTextEditor().Text);
        }
        else
        {
          while (true)
          {
            try
            {
              this.wrdapi.SendLuaScript(this.GetTextEditor().Text);
              break;
            }
            catch
            {
            }
          }
        }
      }
      else
        this.oxyapi.Execute(this.GetTextEditor().Text);
    }

    private void Button_Click_6(object sender, RoutedEventArgs e) => this.ExecuteFromWeb("https://raw.githubusercontent.com/CriShoux/OwlHub/master/OwlHub.txt");

    private void Button_Click_7(object sender, RoutedEventArgs e) => this.ExecuteFromWeb("https://raw.githubusercontent.com/BunnySalf/Hentai/main/MHEEHUB");

    private void Button_Click_8(object sender, RoutedEventArgs e) => this.ExecuteFromWeb("https://raw.githubusercontent.com/CriShoux/OwlHub/master/OwlHub.txt");

    private async void Button_Click_9(object sender, RoutedEventArgs e)
    {
      if (this.isscripthub)
      {
        this.sideBar.Margin = new Thickness(0.0, 63.0, 10.0, 10.0);
        this.isscripthub = false;
        DoubleAnimation d = new DoubleAnimation();
        TimeSpan time = TimeSpan.Parse("00:00:0.3");
        d.From = new double?(0.0);
        d.To = new double?(1.0);
        d.Duration = (Duration) time;
        this.sideBar.BeginAnimation(UIElement.OpacityProperty, (AnimationTimeline) d);
        await Task.Delay(300);
        d = (DoubleAnimation) null;
        time = new TimeSpan();
      }
      else
      {
        this.isscripthub = true;
        DoubleAnimation d = new DoubleAnimation();
        TimeSpan time = TimeSpan.Parse("00:00:0.3");
        d.From = new double?(1.0);
        d.To = new double?(0.0);
        d.Duration = (Duration) time;
        this.sideBar.BeginAnimation(UIElement.OpacityProperty, (AnimationTimeline) d);
        await Task.Delay(300);
        this.sideBar.Margin = new Thickness(0.0, 1163.0, 10.0, 10.0);
        d = (DoubleAnimation) null;
        time = new TimeSpan();
      }
    }

    private void oxycheck_Copy_Checked(object sender, RoutedEventArgs e)
    {
      this.oxycheck_Copy.IsChecked = new bool?(false);
      int num = (int) MessageBox.Show("Exploit: Lxnny\nSome Styles: Ducxy", "AG");
    }

    private void Button_Click_10(object sender, RoutedEventArgs e) => this.WindowState = WindowState.Minimized;

    private void easycheck_Checked(object sender, RoutedEventArgs e)
    {
      this.currentapi = "ez";
      this.oxycheck.IsChecked = new bool?(false);
      this.wrdcheck.IsChecked = new bool?(false);
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/agexploit;component/mainwindow.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 3:
          this.mainborder = (Border) target;
          break;
        case 4:
          this.gamehub_bar = (Border) target;
          break;
        case 5:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click_6);
          break;
        case 6:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click_7);
          break;
        case 7:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click_8);
          break;
        case 8:
          ((UIElement) target).MouseDown += new MouseButtonEventHandler(this.Border_MouseDown);
          break;
        case 9:
          this.logo = (Image) target;
          break;
        case 10:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click);
          break;
        case 11:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click_10);
          break;
        case 12:
          this.buttonbar = (Border) target;
          break;
        case 13:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click_5);
          break;
        case 14:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click_3);
          break;
        case 15:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click_2);
          break;
        case 16:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click_4);
          break;
        case 17:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click_9);
          break;
        case 18:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.Button_Click_1);
          break;
        case 19:
          this.tabControl = (TabControl) target;
          break;
        case 20:
          this.sideBar = (Border) target;
          break;
        case 21:
          this.mainTreeView = (TreeView) target;
          this.mainTreeView.SelectedItemChanged += new RoutedPropertyChangedEventHandler<object>(this.mainTreeView_SelectedItemChanged);
          break;
        case 22:
          this.settingsborder = (Border) target;
          break;
        case 23:
          ((ToggleButton) target).Checked += new RoutedEventHandler(this.CheckBox_Checked);
          ((FrameworkElement) target).Unloaded += new RoutedEventHandler(this.CheckBox_Unloaded);
          ((ToggleButton) target).Unchecked += new RoutedEventHandler(this.CheckBox_Unchecked);
          break;
        case 24:
          this.dccheck = (CheckBox) target;
          this.dccheck.Checked += new RoutedEventHandler(this.CheckBox_Checked_1);
          break;
        case 25:
          this.ytcheck = (CheckBox) target;
          this.ytcheck.Checked += new RoutedEventHandler(this.ytcheck_Checked);
          break;
        case 26:
          ((ToggleButton) target).Checked += new RoutedEventHandler(this.CheckBox_Checked_2);
          ((ToggleButton) target).Unchecked += new RoutedEventHandler(this.CheckBox_Unchecked_1);
          break;
        case 27:
          ((ToggleButton) target).Checked += new RoutedEventHandler(this.CheckBox_Checked_3);
          ((ToggleButton) target).Unchecked += new RoutedEventHandler(this.CheckBox_Unchecked_2);
          break;
        case 28:
          this.wrdcheck = (CheckBox) target;
          this.wrdcheck.Checked += new RoutedEventHandler(this.wrdcheck_Checked);
          break;
        case 29:
          this.oxycheck = (CheckBox) target;
          this.oxycheck.Checked += new RoutedEventHandler(this.oxycheck_Checked);
          break;
        case 30:
          this.oxycheck_Copy = (CheckBox) target;
          this.oxycheck_Copy.Checked += new RoutedEventHandler(this.oxycheck_Copy_Checked);
          break;
        case 31:
          this.easycheck = (CheckBox) target;
          this.easycheck.Checked += new RoutedEventHandler(this.easycheck_Checked);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IStyleConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.ButtonTabs);
          break;
        case 2:
          ((ButtonBase) target).Click += new RoutedEventHandler(this.ButtonTabs);
          break;
      }
    }
  }
}
